// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  username         String             @unique
  profileImg       String?
  password         String
  email            String?            @unique
  phone            String?            @unique
  role             String[]
  refreshToken     String?
  name             String?
  exams            Exam[]
  UserFavoriteExam UserFavoriteExam[]
  UsercompleteExam UserCompleteExam[]
  createdAt        DateTime           @default(now())
  Questioning      Questioning[]
  Explaining       Explaining[]
  sendError        Report[]           @relation("userReport")
}

model Exam {
  id               Int                @id @default(autoincrement())
  owner            User               @relation(fields: [ownerId], references: [id])
  ownerId          Int
  title            String
  isPublic         Boolean            @default(true)
  duration         Int?
  type             String?
  examName         String?
  date             DateTime?
  description      String?
  subjectName      String?
  grade            String?
  publishers       String?
  documentUrl      String?
  isOriginal       Boolean            @default(true)
  securityCode     String?
  allowedUserId    Int[]
  parts            Part[]
  UserFavoriteExam UserFavoriteExam[]
  UsercompleteExam UserCompleteExam[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  Report           Report[]
}

model UserFavoriteExam {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int
  exam       Exam     @relation(fields: [examId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  examId     Int
  assignedAt DateTime @default(now())

  @@id([userId, examId])
}

model UserCompleteExam {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        Int
  exam          Exam     @relation(fields: [examId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  examId        Int
  score         Int?
  completeAt    DateTime @default(now())
  examCompleted Json     @default("{}")
}

model Part {
  id              Int        @id @default(autoincrement())
  exam            Exam       @relation(fields: [examId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  examId          Int
  title           String
  type            String
  totalPoints     Int
  partAudio       String?
  description     String?
  numberOfAnswers Int?
  questionIds     Int[]
  questions       Question[]
}

model Question {
  id             Int      @id @default(autoincrement())
  part           Part     @relation(fields: [partId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  partId         Int
  title          String?
  description    String?
  questionAudio  String?
  questionImages String[]
  explain        String?
  answers        Answer[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId Int
  value      String?
  isTrue     Boolean? @default(false)
}

model Questioning {
  id               Int          @id @default(autoincrement())
  owner            User         @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId          Int
  content          String
  questioningAudio String?
  questioningImage String[]
  tags             String[]
  upVote           Int[]
  downVote         Int[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime?    @updatedAt
  explainings      Explaining[]
}

model Explaining {
  id            Int         @id @default(autoincrement())
  questioning   Questioning @relation(fields: [questioningId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questioningId Int
  owner         User        @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId       Int
  content       String
  upVote        Int[]
  downVote      Int[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
}

model Report {
  id        Int       @id @default(autoincrement())
  user      User      @relation("userReport", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  exam      Exam?     @relation(fields: [examId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  examId    Int?
  image     String?
  content   String
  state     String    @default("pending")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
